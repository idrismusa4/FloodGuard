version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: .
      target: backend
    container_name: floodguardian-backend
    ports:
      - "8000:8000"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - EARTH2_API_KEY=${EARTH2_API_KEY}
      - SMS_GATEWAY_KEY=${SMS_GATEWAY_KEY}
      - MAPS_API_KEY=${MAPS_API_KEY}
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: .
      target: frontend
    container_name: floodguardian-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
    depends_on:
      - backend
    restart: unless-stopped

  # Flood Monitor Job (runs periodically)
  monitor:
    build:
      context: .
      target: backend
    container_name: floodguardian-monitor
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - EARTH2_API_KEY=${EARTH2_API_KEY}
      - SMS_GATEWAY_KEY=${SMS_GATEWAY_KEY}
      - MAPS_API_KEY=${MAPS_API_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
    command: ["python", "jobs/flood_monitor.py", "--continuous"]
    depends_on:
      - backend
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: floodguardian-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  redis_data:

networks:
  default:
    name: floodguardian-network

