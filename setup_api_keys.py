#!/usr/bin/env python3
"""
FloodGuardian AI - API Keys Setup Guide

This interactive script helps you set up all required API keys for the FloodGuardian AI system.
"""

import os
import re

def print_header():
    print("🛡️  FloodGuardian AI - API Keys Setup")
    print("=" * 50)
    print("This script will help you configure all API keys needed for the system.")
    print()

def validate_url(url):
    """Validate Supabase URL format"""
    pattern = r'https://[a-zA-Z0-9-]+\.supabase\.co'
    return bool(re.match(pattern, url))

def validate_phone(phone):
    """Validate phone number format"""
    pattern = r'^\+\d{10,15}$'
    return bool(re.match(pattern, phone))

def setup_supabase():
    print("1️⃣  SUPABASE DATABASE SETUP")
    print("-" * 30)
    print("📋 Steps to get Supabase credentials:")
    print("   1. Go to https://supabase.com")
    print("   2. Sign up and create a new project")
    print("   3. Go to Settings → API")
    print("   4. Copy your Project URL and Service Role Key")
    print()
    
    supabase_url = input("Enter your Supabase Project URL: ").strip()
    while not validate_url(supabase_url):
        print("❌ Invalid URL format. Should be: https://your-project.supabase.co")
        supabase_url = input("Enter your Supabase Project URL: ").strip()
    
    supabase_key = input("Enter your Supabase Service Role Key: ").strip()
    while len(supabase_key) < 50:
        print("❌ Service Role Key seems too short. It should start with 'eyJ...'")
        supabase_key = input("Enter your Supabase Service Role Key: ").strip()
    
    return supabase_url, supabase_key

def setup_twilio():
    print("\n2️⃣  TWILIO SMS SETUP")
    print("-" * 20)
    print("📋 Steps to get Twilio credentials:")
    print("   1. Go to https://twilio.com")
    print("   2. Sign up for free ($15 credit)")
    print("   3. In Console, find Account SID and Auth Token")
    print("   4. Buy a phone number (Phone Numbers → Manage → Buy a number)")
    print()
    
    account_sid = input("Enter your Twilio Account SID (starts with AC...): ").strip()
    while not account_sid.startswith('AC') or len(account_sid) < 30:
        print("❌ Invalid Account SID format. Should start with 'AC' and be ~34 characters")
        account_sid = input("Enter your Twilio Account SID: ").strip()
    
    auth_token = input("Enter your Twilio Auth Token: ").strip()
    while len(auth_token) < 30:
        print("❌ Auth Token seems too short")
        auth_token = input("Enter your Twilio Auth Token: ").strip()
    
    phone_number = input("Enter your Twilio Phone Number (format: +1234567890): ").strip()
    while not validate_phone(phone_number):
        print("❌ Invalid phone format. Should be: +1234567890")
        phone_number = input("Enter your Twilio Phone Number: ").strip()
    
    return account_sid, auth_token, phone_number

def setup_maps():
    print("\n3️⃣  MAPS API SETUP (OPTIONAL)")
    print("-" * 30)
    print("📋 Maps are now using OpenStreetMap (FREE!)")
    print("   No API key required for basic map functionality.")
    print("   Optional: Get OpenRouteService API key for routing:")
    print("   1. Go to https://openrouteservice.org")
    print("   2. Sign up for free account")
    print("   3. Get API key for routing features")
    print()
    
    skip = input("Skip maps API setup? (y/n): ").strip().lower()
    if skip == 'y':
        return "your-maps-api-key-optional"
    
    maps_key = input("Enter your OpenRouteService API Key (optional): ").strip()
    if not maps_key:
        return "your-maps-api-key-optional"
    
    return maps_key

def setup_earth2():
    print("\n4️⃣  NVIDIA EARTH-2 SETUP")
    print("-" * 23)
    print("📋 NVIDIA Earth-2 requires enterprise/research access.")
    print("   For now, we'll use mock predictions for development.")
    print("   You can apply for Earth-2 access at: https://developer.nvidia.com/earth-2")
    print()
    
    return "mock-earth2-key-for-development"

def write_env_file(config):
    """Write configuration to .env file"""
    env_content = f"""# FloodGuardian AI Configuration
# Generated by setup_api_keys.py

# Supabase Configuration
SUPABASE_URL={config['supabase_url']}
SUPABASE_KEY={config['supabase_key']}

# NVIDIA Earth-2 API (Mock for development)
EARTH2_API_KEY={config['earth2_key']}

# Twilio SMS Configuration
TWILIO_ACCOUNT_SID={config['twilio_sid']}
TWILIO_AUTH_TOKEN={config['twilio_token']}
TWILIO_PHONE_NUMBER={config['twilio_phone']}

# Google Maps API
MAPS_API_KEY={config['maps_key']}

# Environment
ENVIRONMENT=development
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("✅ Configuration saved to .env file")

def main():
    print_header()
    
    try:
        # Setup each service
        supabase_url, supabase_key = setup_supabase()
        twilio_sid, twilio_token, twilio_phone = setup_twilio()
        maps_key = setup_maps()
        earth2_key = setup_earth2()
        
        # Prepare configuration
        config = {
            'supabase_url': supabase_url,
            'supabase_key': supabase_key,
            'twilio_sid': twilio_sid,
            'twilio_token': twilio_token,
            'twilio_phone': twilio_phone,
            'maps_key': maps_key,
            'earth2_key': earth2_key
        }
        
        # Write to .env file
        write_env_file(config)
        
        print("\n🎉 API KEYS SETUP COMPLETE!")
        print("=" * 50)
        print("✅ Supabase: Configured")
        print("✅ Twilio SMS: Configured")
        print(f"✅ Google Maps: {'Configured' if maps_key != 'your-maps-api-key' else 'Skipped'}")
        print("✅ NVIDIA Earth-2: Mock (for development)")
        
        print("\n📋 NEXT STEPS:")
        print("1. Run: python setup_database.py")
        print("2. Run: pip install -r requirements.txt")
        print("3. Start backend: python backend/main.py")
        print("4. Start frontend: cd frontend && npm install && npm start")
        
        print("\n🔗 Your system will be available at:")
        print("   Frontend: http://localhost:3000")
        print("   Backend API: http://localhost:8000")
        print("   API Docs: http://localhost:8000/docs")
        
    except KeyboardInterrupt:
        print("\n\n❌ Setup cancelled by user")
    except Exception as e:
        print(f"\n❌ Error during setup: {e}")

if __name__ == "__main__":
    main()

